<?php

/**
 * @file
 * earn_it_form_tweaks.module - Earn It Form Tweaks code.
 *
 * @author
 * Shawn FitzPatrick sdfitzpa@asu.edu
 *
 * Provides form tweaks for the add activity form
 *
 */

/*********************************************************************
  CONFIG
*********************************************************************/


/*********************************************************************
  DRUPAL HOOKS
*********************************************************************/

/**
 * Implements hook_form_alter().
 *
 */
function earn_it_form_tweaks_form_alter(&$form, &$form_state, $form_id) {

  switch($form_id) {

    case 'game_node_form':

      global $user;
      $account = $user;

      $cpath = current_path();
      //drupal_set_message($cpath);
      if ($cpath == "node/add/game") {

        //dsm($form);

        $randomSerial = rand(1000, 10000);
        // TODO: check its not a duplicate

        $form['title']['#default_value'] = "game" . $randomSerial;

        $form['field_serial_number']['und'][0]['value']['#default_value'] = $randomSerial;
        //$form['field_serial_number']['#disabled'] = true;
        $form['field_facilitator']['und']['#default_value'] = $account->uid;
        $form['field_facilitator']['#disabled'] = true;
        $form['field_current_game_state']['#disabled'] = true;

        $form['field_serial_number']['#printed'] = true;
        $form['field_facilitator']['#printed'] = true;
        $form['field_current_game_state']['#printed'] = true;

        $form['title']['#printed'] = true;
        $form['author']['#printed'] = true;
        $form['author']['#title']['#printed'] = true;
        $form['additional_settings']['#printed'] = true;
        $form['revision_information']['#printed'] = true;

        drupal_add_js('jQuery(document).ready(function () { document.getElementById("edit-submit").value = "Start Game"; document.getElementsByClassName("pane-node-form-menu")[0].style.display="none"; document.getElementsByClassName("pane-node-form-publishing")[0].style.display="none"; document.getElementsByClassName("pane-node-form-author")[0].style.display="none"; document.getElementById("edit-draft").style.display="none"; document.getElementById("edit-preview").style.display="none"; document.getElementsByClassName("form-item-path-alias")[0].style.display="none"; });', 'inline');


      }

      break;

    }
}

function earn_it_form_tweaks_node_insert($node) {
  if ($node->type == "game") {
    add_game_to_facilitator($node);
    add_users_to_game($node);
  }
}

function earn_it_form_tweaks_init() {

  $cpath = current_path();
  // INIT-35 - refresh facilitator page every 5 mins to keep session intact
  if ($cpath == "node/58") {
    drupal_add_html_head(
      array(
        '#tag' => 'meta',
        '#attributes' => array(
          'http-equiv' =>"Refresh",
          'content' => '300',
          ),
        ),
      'meta-refresh-init-35'
    );
  }
  // END INIT-35
  if ($cpath == "node/59") { // student page
    global $user;
    if ($user->uid == 0) {
      drupal_set_message('You are not properly logged in. It may be because you selected a color that was not available for a particular game. Please try again.', 'error');
      drupal_goto("user/login");
    }
    //$user = user_load($user->uid);
    // tids 2, 4 and 6 are where they choose activities
    //drupal_add_js(array('earnituid' => array('key' => $user->uid)), 'setting');
    /*
    $cstate = $user->field_student_state['und'][0]['tid'];
    if ($cstate == 2 || $cstate == 4 || $cstate == 6) {
      //drupal_add_js(drupal_get_path('module', 'earn_it_form_tweaks') . '/js/sliders.js');
    }
    */
    //drupal_add_js(drupal_get_path('module', 'earn_it_form_tweaks') . '/js/continue.js');
  }
  /*else if ($cpath == "node/58") { // facilitator page
    global $user;
    $user = user_load($user->uid);

    $result = db_query('SELECT f.field_playing_game_target_id FROM field_data_field_playing_game f WHERE f.entity_id = :cuid', array(':cuid' => $user->uid));

    foreach ($result as $record) {
      $gnid = $record -> field_playing_game_target_id;
    }
    $cgame = node_load($gnid);

    drupal_add_js(array('gamenid' => array('key' => $gnid)), 'setting');

    $cstate = $cgame->field_current_game_state['und'][0]['tid'];
    if ($cstate == 1) { // init
      drupal_add_js(drupal_get_path('module', 'earn_it_form_tweaks') . '/js/continue-init.js');
    }
    else if ($cstate == 2) {
      drupal_add_js(drupal_get_path('module', 'earn_it_form_tweaks') . '/js/continue-week1.js');
    }
    //drupal_add_js(array('gamestate' => array('key' => $cgame->field_current_game_state['und'][0]['tid'])), 'setting');

    //drupal_add_js(drupal_get_path('module', 'earn_it_form_tweaks') . '/js/continue-facil.js');
  }*/
}

function earn_it_form_tweaks_menu() {
  $items = array();

  $items['user_progress/%'] = array(
    'title' => 'Update student progress',
    'description' => 'Callback for updating student progress.',
    'page callback' => '_earn_it_form_tweaks_update_student_progress',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['facil_progress/%'] = array(
    'title' => 'Update facilitator progress',
    'description' => 'Callback for updating facilitator progress.',
    'page callback' => '_earn_it_form_tweaks_update_facil_progress',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['create_response/%'] = array(
    'title' => 'Create a response to an activity',
    'description' => 'Callback for creating a response node.',
    'page callback' => '_earn_it_form_tweaks_create_response',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['update_student_gpa_act/%'] = array(
    'title' => 'modify student GPA and ACT score',
    'description' => 'Callback for updating GPA and ACT.',
    'page callback' => '_earn_it_form_tweaks_update_student_gpa_act',
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['delete_student_user/%'] = array(
    'title' => 'delete a user after verifying they are a student',
    'description' => 'Callback for verifying student and deleting them.',
    'page callback' => '_earn_it_form_tweaks_delete_student',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['reset_game/%'] = array(
    'title' => 'set a game and its users back to the start',
    'description' => 'reset a game.',
    'page callback' => '_earn_it_form_tweaks_reset_game',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/*********************************************************************
  API
*********************************************************************/

function add_game_to_facilitator($node) {
  global $user;
  $existing = user_load($user->uid);
  $edit = (array) $existing;
  $edit['field_playing_game']['und'][0]['target_id'] = $node->nid;
  user_save($existing, $edit);
}

function add_users_to_game($node) {

  $gnid = $node->nid;
  $gameNum = $node->field_serial_number['und'][0]['value'];

  $numPlayers = $node->field_number_of_players['und'][0]['value'];
  $currColor = 16;

  for ($i=0; $i<$numPlayers; $i++) { // loops from 1 to the last player
    $colorName = taxonomy_term_load($currColor) -> name;
    $edit = array(
      'name' => $gameNum . $colorName,
      'pass' => $gameNum . $colorName,
      'status' => 1,
      'field_student_state' => array(
        'und' => array(
          0 => array(
            "tid" => 1))),
      'field_playing_game' => array(
        'und' => array(
          0 => array(
            "target_id" => $gnid))),
      'field_team_color' => array(
        'und' => array(
          0 => array(
            "tid" => $currColor))),
      'field_gpa' => array(
        'und' => array(
          0 => array(
            "value" => 0))),
      'field_act_score' => array(
        'und' => array(
          0 => array(
            "value" => 22))),
      'field_scholarship_money' => array(
        'und' => array(
          0 => array(
            "value" => 0))),
    );
    user_save(null, $edit);
    $currColor++;

  }
}

function _earn_it_form_tweaks_check_all_stu_add_btn($check_for) {
  global $user;
  $user = user_load($user->uid);

  $result = db_query('SELECT f.field_playing_game_target_id FROM field_data_field_playing_game f WHERE f.entity_id = :cuid', array(':cuid' => $user->uid));

  foreach ($result as $record) {
    $gnid = $record -> field_playing_game_target_id;
  }

  $result2 = db_query('SELECT f.entity_id FROM field_data_field_playing_game f WHERE f.field_playing_game_target_id = :gnid', array(':gnid' => $gnid));

  $done = true;

  drupal_set_message("about to enter second loop");

  foreach ($result2 as $record2) {
    drupal_set_message($record2->entity_id . " ; ");
    if ($record2 -> entity_id != $user->uid) { // make sure its a student not the facilitator
      $cuser = user_load($record2->entity_id);
      if ($cuser -> field_student_state['und'][0]['tid'] != $check_for) {
        $done = false;
      }
    }
  }

  if ($done) {
    drupal_set_message("hitting done if");
    drupal_add_js(array('gamenid' => array('key' => $gnid)), 'setting');
    drupal_add_js(drupal_get_path('module', 'earn_it_form_tweaks') . '/js/continue-facil.js');
  }

}

function _earn_it_form_tweaks_update_student_progress($arg1, $arg2) {
  // Sanitize URL args
  $arg1 = check_url($arg1);
  $arg2 = check_url($arg2);
  $cuser = user_load($arg1); // arg1 is uid
  $edit = array(
    'field_student_state' => array(
        'und' => array(
          0 => array(
            "tid" => $arg2))), // arg2 is the tid of state
  );
  user_save($cuser, $edit);
  $fakevar = 35;
  return $fakevar;
  //if (isset(user_save($cuser, $edit)->uid))
    //_earn_it_form_tweaks_check_all_stu_add_btn($arg2);
}

function _earn_it_form_tweaks_update_facil_progress($arg1, $arg2) {
  // Sanitize URL args
  $arg1 = check_url($arg1);
  $arg2 = check_url($arg2);
  $cnode = node_load($arg1); // arg1 is nid
  $cnode -> field_current_game_state['und'][0]['tid'] = $arg2; // tid
  node_save($cnode);
}

/**
 * Create a single response node for ALL selected activities for a single week, for
 * a single user. This is called multiple times for each weekly submission, once for
 * each activity.
 *
 * The scholarship money is tracked by getting the user's existing
 * field_scholarship_money value, updating it based on $cscholarship2, and calling
 * user_save().
 *
 * Currently called by Javascript code in button blocks.
 *
 * @param unknown_type $arg1 - The activity id (node id)
 * @param unknown_type $arg2 - The uid of the team
 * @param unknown_type $arg3 - The hours spent on the activity
 */
function _earn_it_form_tweaks_create_response($arg1, $arg2, $arg3) { // activity, user, hours, money
  // Sanitize URL args
  $arg1 = check_url($arg1);
  $arg2 = check_url($arg2);
  $arg3 = check_url($arg3);
  // create and save the response node
  $cuser = user_load($arg2);
  $values = array(
    'type' => 'response',
    'uid' => $cuser->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  $cscholarship = 0;

  // load activity node
  $cnode = node_load($arg1);

  // the current activity's scholarship bonus (or loss)
  if ($cnode->field_variable_time['und'][0]['value'] == 0) { // fixed time
    $cscholarship +=  $cnode->field_scholarship['und'][0]['value'];
  }
  else {
    $cscholarship += ($cnode->field_scholarship_per_hour['und'][0]['value'] * $arg3);
  }

  $entity = entity_create('node', $values);
  $ewrapper = entity_metadata_wrapper('node', $entity);
  $ewrapper->title->set($cuser->name . $arg1);

  $ewrapper->field_selected_activity->set(intval($arg1));
  $ewrapper->field_selecting_user->set(intval($arg2));
  $ewrapper->field_selected_hours->set(intval($arg3));
  $ewrapper->field_selected_money->set(intval($cscholarship));
  $ewrapper->save();

  // add scholarship money to the user
  $cscholarship2 = $cuser->field_scholarship_money['und'][0]['value'] + $cscholarship;

  // FIXME: also save ACT and GPA here, or
  // in _earn_it_form_tweaks_update_student_gpa_act
  // Currently done in Javascript in block ids 6, 10, and 13 (one for each week)
  $edit = array(
    'field_scholarship_money' => array(
      'und' => array(
        0 => array(
          "value" => $cscholarship2,
        )
      )
    ),
  );
  user_save($cuser, $edit);
}

function _earn_it_form_tweaks_update_student_gpa_act ($arg1, $arg2, $arg3) {
  // Sanitize URL args
  $arg1 = check_url($arg1);
  $arg2 = check_url($arg2);
  $arg3 = check_url($arg3);

// uid, gpa, act
  $cuser = user_load($arg1);

  $edit = array(
    'field_gpa' => array(
      'und' => array(
        0 => array(
          "value" => $arg2,
        )
      )
    ),
    'field_act_score' => array(
      'und' => array(
        0 => array(
          "value" => $arg3,
        )
      )
    ),
  );
  user_save($cuser, $edit);
}

function _earn_it_form_tweaks_delete_student ($arg1) { // uid
  // Sanitize URL args
  $arg1 = check_url($arg1);

  // verify the uid belongs to a student
  // edit the game to no longer have that many students
  // delete the student
  $cuser = user_load($arg1);


  if (!in_array('Facilitator', $cuser->roles)) { // not a facilitator
    $cnid = $cuser->field_playing_game['und'][0]['target_id'];
    $cnode = node_load($cnid);
    $cnode -> field_number_of_players['und'][0]['value']--;
    if ($cnode -> field_number_of_players['und'][0]['value'] < 0)
      $cnode -> field_number_of_players['und'][0]['value'] = 0;
    node_save($cnode);

    $edit = array(
      'field_playing_game' => array(
        'und' => array(
          0 => array(
            "target_id" => 0)))
    );
    user_save($cuser, $edit);
  }
}

function _earn_it_form_tweaks_reset_game ($arg1) { // nid of the game to reset
  // $arg1 sanitized by db_query below
  $result = db_query('SELECT f.entity_id FROM field_data_field_playing_game f WHERE f.field_playing_game_target_id = :nid', array(':nid' => $arg1));

  foreach ($result as $record) {
    $cuser = user_load($record->entity_id);
    $edit = array(
	  'field_gpa' => array(
        'und' => array(
          0 => array(
            "value" => 0))),
      'field_act_score' => array(
        'und' => array(
          0 => array(
            "value" => 22))),
      'field_scholarship_money' => array(
        'und' => array(
          0 => array(
            "value" => 0))),
      'field_student_state' => array(
        'und' => array(
          0 => array(
            "tid" => 1)))
    );
    user_save($cuser, $edit);
  }

  $cnode = node_load($arg1);
  $cnode -> field_current_game_state['und'][0]['tid'] = 1;
  node_save($cnode);
}